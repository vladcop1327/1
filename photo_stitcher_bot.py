import logging
import asyncio
import os
from io import BytesIO
from PIL import Image
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegraph import upload_file
import nest_asyncio

nest_asyncio.apply()

TOKEN = '8061285829:AAFMjY72I6W3yKDtbR5MaIT72F-R61wFcAM'

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

user_state = {}
user_settings = {}
user_photos = {}
media_group_photos = {}

WAITING_DIRECTION = "waiting_direction"
WAITING_DESCRIPTION = "waiting_description"


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_state[user_id] = WAITING_DIRECTION
    user_settings[user_id] = {}
    user_photos[user_id] = []
    media_group_photos[user_id] = []

    keyboard = [
        [KeyboardButton("üîπ –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ")],
        [KeyboardButton("üîª –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ")]
    ]
    markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å 2 –∏–ª–∏ 3 —Ñ–æ—Ç–æ **–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º** (–∞–ª—å–±–æ–º–æ–º),\n–∞ –ø–æ—Ç–æ–º –≤—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± —Å—à–∏–≤–∞–Ω–∏—è.",
        reply_markup=markup
    )


async def handle_photos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    msg = update.message

    if msg.media_group_id:
        if user_id not in media_group_photos:
            media_group_photos[user_id] = []
        photo_file = await msg.photo[-1].get_file()
        data = await photo_file.download_as_bytearray()
        media_group_photos[user_id].append(BytesIO(data))

        await asyncio.sleep(1) 
        return

  
    await msg.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å—Ä–∞–∑—É 2 –∏–ª–∏ 3 —Ñ–æ—Ç–æ **–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º** (–∞–ª—å–±–æ–º–æ–º).")


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    state = user_state.get(user_id)
    text = update.message.text.lower()

    if state == WAITING_DIRECTION:
        if "–≥–æ—Ä–∏–∑" in text:
            user_settings[user_id]["direction"] = "horizontal"
        elif "–≤–µ—Ä—Ç–∏–∫" in text:
            user_settings[user_id]["direction"] = "vertical"
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏: üîπ –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ –∏–ª–∏ üîª –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ")
            return

      
        if user_id not in media_group_photos or not (2 <= len(media_group_photos[user_id]) <= 3):
            await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å 2 –∏–ª–∏ 3 —Ñ–æ—Ç–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
            return

        user_photos[user_id] = media_group_photos[user_id]
        media_group_photos[user_id] = []
        user_state[user_id] = WAITING_DESCRIPTION
        await update.message.reply_text("üñãÔ∏è –ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –∫–æ–ª–ª–∞–∂—É:", reply_markup=ReplyKeyboardRemove())

    elif state == WAITING_DESCRIPTION:
        await update.message.reply_text("üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        await send_collage(update, context, text)
        user_state[user_id] = None
        user_photos[user_id] = []
        user_settings[user_id] = {}


async def send_collage(update, context, description):
    user_id = update.effective_user.id
    images = user_photos.get(user_id, [])
    direction = user_settings[user_id].get("direction", "horizontal")

    if not images:
        await update.message.reply_text("‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    stitched = stitch_images(images, direction)
    filename = f"collage_{user_id}.jpg"
    with open(filename, "wb") as f:
        f.write(stitched.getbuffer())

    try:
        response = upload_file(filename)
        url = f"https://telegra.ph{response[0]}"
        await update.message.reply_text(
            f"‚úÖ –ì–æ—Ç–æ–≤–æ!\nüîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–ª–ª–∞–∂: {url}\n\nüìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{description}"
        )
    except Exception as e:
        logger.error(f"Telegraph error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ Telegraph. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ < 5MB.")
    finally:
        if os.path.exists(filename):
            os.remove(filename)


def stitch_images(images, direction):
    pil_images = [Image.open(img).convert("RGB") for img in images]

    if direction == 'horizontal':
        max_h = max(i.height for i in pil_images)
        resized = [i.resize((int(i.width * max_h / i.height), max_h)) for i in pil_images]
        total_w = sum(i.width for i in resized)
        result = Image.new('RGB', (total_w, max_h))
        x = 0
        for i in resized:
            result.paste(i, (x, 0))
            x += i.width
    else:
        max_w = max(i.width for i in pil_images)
        resized = [i.resize((max_w, int(i.height * max_w / i.width))) for i in pil_images]
        total_h = sum(i.height for i in resized)
        result = Image.new('RGB', (max_w, total_h))
        y = 0
        for i in resized:
            result.paste(i, (0, y))
            y += i.height

    result = result.resize((result.width // 2, result.height // 2))
    output = BytesIO()
    result.save(output, format='JPEG', quality=30, optimize=True)
    output.seek(0)
    return output


async def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO & filters.ChatType.PRIVATE, handle_photos))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling()

if __name__ == '__main__':
    asyncio.run(main())
