import logging
from io import BytesIO
from PIL import Image
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import nest_asyncio
import asyncio

nest_asyncio.apply()


TOKEN = '8061285829:AAFMjY72I6W3yKDtbR5MaIT72F-R61wFcAM' 

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
WAITING_DIRECTION = "waiting_direction"
WAITING_COUNT = "waiting_count"
WAITING_PHOTOS = "waiting_photos"

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_state = {}        # user_id -> —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
user_photos = {}       # user_id -> —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ
user_settings = {}     # user_id -> {direction, count}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_state[user_id] = WAITING_DIRECTION
    user_settings[user_id] = {}

    keyboard = [[KeyboardButton("–ü–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏")], [KeyboardButton("–ü–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏")]]
    markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text("üìê –í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—à–∏–≤–∞–Ω–∏—è:", reply_markup=markup)


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip().lower()

    # –í—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if user_state.get(user_id) == WAITING_DIRECTION:
        if "–≥–æ—Ä–∏–∑–æ–Ω—Ç" in text:
            user_settings[user_id]["direction"] = "horizontal"
        elif "–≤–µ—Ä—Ç–∏–∫–∞–ª" in text:
            user_settings[user_id]["direction"] = "vertical"
        else:
            await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏: –ü–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –∏–ª–∏ –ü–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏.")
            return

        user_state[user_id] = WAITING_COUNT
        keyboard = [[KeyboardButton("2 —Ñ–æ—Ç–æ")], [KeyboardButton("3 —Ñ–æ—Ç–æ")]]
        markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text("üì∏ –°–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ —Ö–æ—á–µ—à—å —Å—à–∏—Ç—å?", reply_markup=markup)
        return

    # –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ
    if user_state.get(user_id) == WAITING_COUNT:
        if "2" in text:
            user_settings[user_id]["count"] = 2
        elif "3" in text:
            user_settings[user_id]["count"] = 3
        else:
            await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏: 2 —Ñ–æ—Ç–æ –∏–ª–∏ 3 —Ñ–æ—Ç–æ.")
            return

        user_state[user_id] = WAITING_PHOTOS
        user_photos[user_id] = []

        await update.message.reply_text(
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –û—Ç–ø—Ä–∞–≤—å {user_settings[user_id]['count']} —Ñ–æ—Ç–æ –¥–ª—è —Å—à–∏–≤–∞–Ω–∏—è.",
            reply_markup=ReplyKeyboardRemove()
        )


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_state.get(user_id) != WAITING_PHOTOS:
        await update.message.reply_text("üîÑ –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    photo_file = await update.message.photo[-1].get_file()
    byte_data = await photo_file.download_as_bytearray()
    photo = BytesIO(byte_data)

    user_photos[user_id].append(photo)
    count_needed = user_settings[user_id]["count"]
    count_now = len(user_photos[user_id])

    if count_now < count_needed:
        await update.message.reply_text(f"üì• –ü—Ä–∏–Ω—è—Ç–æ! –ñ–¥—É –µ—â—ë {count_needed - count_now} —Ñ–æ—Ç–æ...")
    elif count_now == count_needed:
        await update.message.reply_text("üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...")
        await send_stitched_image(update, context, user_id)
        user_photos[user_id] = []
        user_state[user_id] = None
    else:
        await update.message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ñ–æ—Ç–æ. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —Å /start.")
        user_photos[user_id] = []
        user_state[user_id] = None


async def send_stitched_image(update, context, user_id):
    images = user_photos[user_id]
    direction = user_settings[user_id].get("direction", "horizontal")

    try:
        stitched = stitch_images(images, direction)
        await update.message.reply_photo(photo=stitched)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—à–∏–≤–∞–Ω–∏–∏: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—à–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")


def stitch_images(images, direction='horizontal'):
    pil_images = [Image.open(img).convert("RGB") for img in images]

    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ –æ–¥–Ω–æ–π –≤—ã—Å–æ—Ç–µ –∏–ª–∏ —à–∏—Ä–∏–Ω–µ
    if direction == 'horizontal':
        max_height = max(img.height for img in pil_images)
        resized = [img.resize((int(img.width * max_height / img.height), max_height)) for img in pil_images]
    else:
        max_width = max(img.width for img in pil_images)
        resized = [img.resize((max_width, int(img.height * max_width / img.width))) for img in pil_images]

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    widths, heights = zip(*(img.size for img in resized))
    if direction == 'horizontal':
        total_width = sum(widths)
        result = Image.new('RGB', (total_width, max(heights)))
        x_offset = 0
        for img in resized:
            result.paste(img, (x_offset, 0))
            x_offset += img.width
    else:
        total_height = sum(heights)
        result = Image.new('RGB', (max(widths), total_height))
        y_offset = 0
        for img in resized:
            result.paste(img, (0, y_offset))
            y_offset += img.height

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –±–∞–π—Ç—ã
    output = BytesIO()
    result.save(output, format='JPEG')
    output.seek(0)
    return output


async def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling()


if __name__ == '__main__':
    asyncio.run(main())
