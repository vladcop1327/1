import logging
from io import BytesIO
from PIL import Image
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegraph import Telegraph, upload_file
import asyncio
import nest_asyncio

nest_asyncio.apply()

TOKEN = '8061285829:AAFMjY72I6W3yKDtbR5MaIT72F-R61wFcAM'

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

telegraph = Telegraph()
telegraph.create_account(short_name="photo_bot")

user_state = {}
user_photos = {}
user_descriptions = {}
user_settings = {}

WAITING_DIRECTION = "waiting_direction"
WAITING_COUNT = "waiting_count"
WAITING_PHOTOS = "waiting_photos"
WAITING_DESCRIPTION = "waiting_description"


def main_menu():
    keyboard = [[KeyboardButton("–ì–û–†–ò–ó–û–ù–¢–ê–õ–¨–ù–û")], [KeyboardButton("–í–ï–†–¢–ò–ö–ê–õ–¨–ù–û")]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


def count_menu():
    keyboard = [[KeyboardButton("2 –§–û–¢–û")], [KeyboardButton("3 –§–û–¢–û")]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


def continue_button():
    keyboard = [[KeyboardButton("–ü–†–û–î–û–õ–ñ–ò–¢–¨")]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


async def start_session(update: Update, user_id):
    user_state[user_id] = WAITING_DIRECTION
    user_settings[user_id] = {}
    user_photos[user_id] = []
    user_descriptions[user_id] = []
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—à–∏–≤–∞–Ω–∏—è:", reply_markup=main_menu())


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start_session(update, update.effective_user.id)


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip().lower()
    state = user_state.get(user_id)

    if text == "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
        await start_session(update, user_id)
        return

    if state == WAITING_DIRECTION:
        if "–≥–æ—Ä–∏–∑–æ–Ω—Ç" in text:
            user_settings[user_id]["direction"] = "horizontal"
        elif "–≤–µ—Ä—Ç–∏–∫–∞–ª" in text:
            user_settings[user_id]["direction"] = "vertical"
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏: –ì–û–†–ò–ó–û–ù–¢–ê–õ–¨–ù–û –∏–ª–∏ –í–ï–†–¢–ò–ö–ê–õ–¨–ù–û.")
            return
        user_state[user_id] = WAITING_COUNT
        await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ —Ö–æ—á–µ—à—å —Å—à–∏—Ç—å?", reply_markup=count_menu())

    elif state == WAITING_COUNT:
        if "2" in text:
            user_settings[user_id]["count"] = 2
        elif "3" in text:
            user_settings[user_id]["count"] = 3
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏: 2 –§–û–¢–û –∏–ª–∏ 3 –§–û–¢–û.")
            return
        user_state[user_id] = WAITING_PHOTOS
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ #1:", reply_markup=ReplyKeyboardRemove())

    elif state == WAITING_DESCRIPTION:
        user_descriptions[user_id].append(text)
        if len(user_descriptions[user_id]) < user_settings[user_id]["count"]:
            await update.message.reply_text(f"–í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ñ–æ—Ç–æ #{len(user_descriptions[user_id]) + 1}:")
        else:
            await update.message.reply_text("–°–æ–∑–¥–∞—é –∫–æ–ª–ª–∞–∂, –ø–æ–¥–æ–∂–¥–∏...")
            await send_stitched_image(update, user_id)
            await update.message.reply_text("–ì–æ—Ç–æ–≤–æ! –•–æ—á–µ—à—å –µ—â—ë?", reply_markup=continue_button())
            user_state[user_id] = None


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    state = user_state.get(user_id)

    if state != WAITING_PHOTOS:
        await update.message.reply_text("–ù–∞–∂–º–∏ /start –∏–ª–∏ '–ü–†–û–î–û–õ–ñ–ò–¢–¨', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return

    photo_file = await update.message.photo[-1].get_file()
    byte_data = await photo_file.download_as_bytearray()
    user_photos[user_id].append(BytesIO(byte_data))

    if len(user_photos[user_id]) < user_settings[user_id]["count"]:
        await update.message.reply_text(f"–ü—Ä–∏–Ω—è—Ç–æ! –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ #{len(user_photos[user_id]) + 1}:")
    else:
        user_state[user_id] = WAITING_DESCRIPTION
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ñ–æ—Ç–æ #1:")


def stitch_images(images, direction='horizontal'):
    pil_images = [Image.open(img).convert("RGB") for img in images]

    if direction == 'horizontal':
        max_height = max(img.height for img in pil_images)
        resized = [img.resize((int(img.width * max_height / img.height), max_height)) for img in pil_images]
        total_width = sum(img.width for img in resized)
        result = Image.new('RGB', (total_width, max_height))
        x = 0
        for img in resized:
            result.paste(img, (x, 0))
            x += img.width
    else:
        max_width = max(img.width for img in pil_images)
        resized = [img.resize((max_width, int(img.height * max_width / img.width))) for img in pil_images]
        total_height = sum(img.height for img in resized)
        result = Image.new('RGB', (max_width, total_height))
        y = 0
        for img in resized:
            result.paste(img, (0, y))
            y += img.height

    output = BytesIO()
    result.save(output, format='JPEG')
    output.seek(0)
    return output


async def send_stitched_image(update: Update, user_id):
    images = user_photos[user_id]
    descriptions = user_descriptions[user_id]
    direction = user_settings[user_id].get("direction", "horizontal")

    stitched = stitch_images(images, direction)
    file_name = f"collage_{user_id}.jpg"
    with open(file_name, "wb") as f:
        f.write(stitched.getbuffer())

    try:
        response = upload_file(file_name)
        url = f"https://telegra.ph{response[0]}"
        desc_html = "<br><br>".join([f"<b>–§–æ—Ç–æ {i+1}:</b><br>{desc}" for i, desc in enumerate(descriptions)])

        page = telegraph.create_page(
            title="–ö–æ–ª–ª–∞–∂",
            html_content=f'<img src="{url}"><br><br>{desc_html}'
        )
        await update.message.reply_text(f"üñº –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–ª–ª–∞–∂: https://telegra.ph/{page['path']}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Telegraph: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ Telegraph.")


async def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling()


if __name__ == '__main__':
    asyncio.run(main())
